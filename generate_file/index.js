const { Storage } = require('@google-cloud/storage');
const { BigQuery } = require('@google-cloud/bigquery');
const fs = require('fs-extra');


const bq = new BigQuery();
const datasetId = 'csv_files';
const tableId = 'files_table';

exports.readFiles = async (file, context) => {

    const pdfFile = file;
    const storage = new Storage();
    const sourceBucket = storage.bucket(pdfFile.bucket);
    const maliciousBucket = storage.bucket('cit412-malware-malicious-pdf');
    const benignBucket = storage.bucket('cit412-malware-benign-pdf');

  

    // Reject if file is not pdf
    if (pdfFile.contentType === 'application/pdf') {

        console.log('This is a pdf file');

        const [files] = await sourceBucket.getFiles();

        for (const file of files) {
            let fileName = file.name;

            console.log(`File name: ${fileName}`);

            const sqlQuery = `SELECT class FROM cit412-llinh-malwarescanner.${datasetId}.${tableId} WHERE filename = @fileName`;

            const options = {
                query: sqlQuery,
                params: {
                    fileName: fileName
                }
            };

            // Run the query
            const [rows] = await bq.query(options);

            rows.forEach( async row => {
                if (row['class'] == 'Malicious') {
                    await downloadAndUpload(file, maliciousBucket);
                    console.log('This is a maliciuos file')
                } else if (row['class'] == 'Benign') {
                    await downloadAndUpload(file, benignBucket)
                    console.log('This is a benign file')
                }    
            });
        
        }

        await sourceBucket.deleteFiles({ force: true });
        console.log(`All files in ${sourceBucket.name} deleted.`);

    } else {
        console.log('This is not a valid file');
    }
};


async function downloadAndUpload(file, bucket) {

    const tempFilePath = `/tmp/${file.name}`;
    await file.download({ destination: tempFilePath });
    await bucket.upload(tempFilePath);
    await fs.remove(tempFilePath);
    
}
