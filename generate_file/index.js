const { Storage } = require('@google-cloud/storage');
const { BigQuery } = require('@google-cloud/bigquery');
const fs = require('fs-extra');
const path =require('path');
const os = require('os')

const bq = new BigQuery();
const datasetId = 'csv_files';
const tableId = 'files_table';



exports.readFiles = async (file, context) => {

    const pdfFile = file;
    const storage = new Storage();
    const sourceBucket = storage.bucket(pdfFile.bucket);
    const maliciousBucket = storage.bucket('cit412-malware-malicious-pdf');
    const benignBucket = storage.bucket('cit412-malware-benign-pdf');

    console.log(`File name: ${pdfFile.name}`);
    console.log(`Generation: ${pdfFile.generation}`);
    console.log(`Content type: ${pdfFile.contentType}`);

    // Reject if file is not pdf
    if (pdfFile.contentType === 'application/pdf') {

        console.log('This is a pdf file');

        const [files] = await sourceBucket.getFiles();

        for (const file of files) {
            let fileName = file.name;

            console.log(`File name: ${fileName}`);

            const sqlQuery = `SELECT class FROM cit412-llinh-malwarescanner.${datasetId}.${tableId} WHERE filename = '${fileName}'`;

            const options = {
                query: sqlQuery
            };

            // Run the query
            const [rows] = await bq.query(options);

            rows.forEach( async row => {
                let value = row['class'];
                    if (value == 'Malicious') {
                        await downloadAndUpload(file, maliciousBucket, fileName)
                    } else if (value == 'Benign') {
                        await downloadAndUpload(file, benignBucket, fileName)
                    }    
            });
        
        }

        await sourceBucket.deleteFiles({ force: true });
        console.log(`All files in ${sourceBucket.name} deleted.`);

    } else {
        console.log('This is not a valid file');
    }
};


async function downloadAndUpload(file, bucket, fileName) {

    const workingDir = path.join(os.tmpdir(), fileName);
    const tempFilePath = path.join(workingDir, fileName);

    try {
        await fs.ensureDir(workingDir);
        await file.download({ destination: tempFilePath });
        await bucket.upload(tempFilePath);

    } catch (error) {
        console.error('Error downloading or uploading file:', error);
        // Handle error accordingly
    } finally {
        // Cleanup temporary directory
        await fs.remove(workingDir);
    }
}
